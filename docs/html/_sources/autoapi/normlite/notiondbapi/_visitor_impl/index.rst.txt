normlite.notiondbapi._visitor_impl
==================================

.. py:module:: normlite.notiondbapi._visitor_impl

.. autoapi-nested-parse::

   Provide the visitor implementation for cross-compiling Notion JSON objects to tuples of elements.

   This module provides two different visitors to accomplish the following cross-compilation tasks from
   :class:`notiondbapi._model.NotionPage` or :class:`notiondbapi._model.NotionDatabase` objects, which have been constructed by parsing the
   JSON object return by the Notion API:

       1. Create a DBAPI row: :class:`normlite.notiondbapi._visitor_impl.ToRowVisitor`.

       2. Create a DBAPI description: :class:`normlite.notiondbapi._visitor_impl.ToDescVisitor`.

   :class:`ToRowVisitor` constructs the row objects returned by :meth:`normlite.notiondbapi.dbapi2.Cursor.fetchone()` and
   :meth:`normlite.notiondbapi.dbapi2.Cursor.fetchall()`. A row object is a Python ``tuple`` containing one value for each column
   in the table representing the corresponding Notion object.

   :class:`ToDescVisitor` construct the cursor description object returned by the read-only attribute
   :attr:`normlite.notiondbapi.dbapi2.Cursor.description`. A description object is a sequence of Python tuples containing metadata
   used by the :class:`normlite.cursor.CursorResult` to construct :class:`normlite.cursor.Row` objects for a more pythonic hanlding
   of the query results.

   For example, given the following page object is returned from a query to Notion (non
   relevant keys ommitted for brevity):

   .. code-block:: json

       {
           "object": "page",
           "id": "59833787-2cf9-4fdf-8782-e53db20768a5",
           "archived": false,
           "properties": {
               "Price": {
                   "id": "BJXS",
                   "type": "number",
                   "number": 2.5
               },
               "Description": {
                   "id": "_Tc_",
                   "type": "rich_text",
                   "rich_text": [
                       {
                           "type": "text",
                           "text": {
                               "content": "A dark ",
                               "link": null
                           },
                           "annotations": {
                               "bold": false,
                               "italic": false,
                               "strikethrough": false,
                               "underline": false,
                               "code": false,
                               "color": "default"
                           },
                           "plain_text": "A dark ",
                           "href": null
                       },
                       {
                           "type": "text",
                           "text": {
                               "content": "green",
                               "link": null
                           },
                           "annotations": {
                               "bold": false,
                               "italic": false,
                               "strikethrough": false,
                               "underline": false,
                               "code": false,
                               "color": "green"
                           },
                           "plain_text": "green",
                           "href": null
                       },
                       {
                           "type": "text",
                               "text": {
                                   "content": " leafy vegetable",
                                   "link": null
                               },
                               "annotations": {
                                   "bold": false,
                                   "italic": false,
                                   "strikethrough": false,
                                   "underline": false,
                                   "code": false,
                                   "color": "default"
                               },
                               "plain_text": " leafy vegetable",
                               "href": null
                           }
                   ]
               },
               "Name": {
                   "id": "title",
                   "type": "title",
                   "title": [
                       {
                           "type": "text",
                           "text": {
                               "content": "Tuscan kale",
                               "link": null
                           },
                           "annotations": {
                               "bold": false,
                               "italic": false,
                               "strikethrough": false,
                               "underline": false,
                               "code": false,
                               "color": "default"
                           },
                           "plain_text": "Tuscan kale",
                           "href": null
                       }
                   ]
               }
           }
       }

   Then the cross-compiler returns a tuple constructed as follows::

       (
           '59833787-2cf9-4fdf-8782-e53db20768a5',     # object id
           False,                                      # archived flag
           None,                                       # in_trash flag
           2.5,                                        # Price
           'A dark green leafy vegetable',             # Description
           'Tuscan kale',                              # Name
       )


   The following complete example shows how the DBAPI row looks like when a database
   object is returned after creation::

       # example row returned by the Notion API when creating a new database object
       # parameters is the corresponding dictionary containing the keys "payload" and "params"
       cursor.execute({"endpoint": "databases", "request": "create"}, parameters)
       row = cursor.fetchone()
       print(row)
       (
           'bc1211ca-e3f1-4939-ae34-5260b16f627c',     # object id
           'students',                                 # database title (i.e. tabale name)
           False,                                      # archived flag
           None,                                       # in_trash flag
           'evWq',                                     # property id for column 1 (id)
           'title'                                     # property id for column 2 (name)
           'V}lX',                                     # property id for column 3 (grade)
       )

   A description object for the DBAPI row is available in the cursor description attribute
   (see :attr:`notiondbapi.dbapi2.Cursor.description`, for more details) and it looks as follows::

       # continuing previous example
       print(cursor.description)
       (
           ('id', 'string', None,),                    # object id
           ('title', None, 'students')                 # database title
           ('archived', None, None, )                  # the archived flag
           ('in_trash', None, None, )                  # the in_trash flag
           ('id', 'number', 'evWq',),                  # property name 'id'
           ('name', 'title', 'title',),                # property name 'name'
           ('grade', 'rich_text', 'V}lX' ),            # property name 'grade'
       )

   .. important::

      This module is **private** to the package :mod:`notiondbapi` and it does **not** expose
      its features outside.





Module Contents
---------------

.. py:class:: ToRowVisitor

   Bases: :py:obj:`normlite.notiondbapi._model.NotionObjectVisitor`


   Cross-compiles Notion objects into a DBAPI row.

   .. versionchanged:: 0.4.0
       The overall cross-compilation implemented in :class:`ToRowVisitor` has been refactored to be fully DBAPI 2.0 compliant.



   .. py:method:: visit_page(page: normlite.notiondbapi._model.NotionPage) -> tuple

      Cross-compile a page object.

      Notion returns different data depending whether a page has been created, deleted, updated
      or queried. The following table shows how the row tuples look like in each case.

      .. note::

         ``normlite`` DBAPI 2.0 layer returns all data provided by the Notion API.
         The higher abtraction layer implemented by :class:`normlite.cursor.CursorResult` filters the
         values contained in the DBAPI row. That is, the :class:`normlite.cursor.Row` objects produced by the
         cursor result fetch methods (e.g. :meth:`normlite.cursor.CursorResult.fetchone()`) provide a subset only
         of the values contained in the DBAPI row. For example, when a new page is created,
         the object id of the new page only is available in the cursor result row.

      .. list-table:: Values contained in DBAPI rows based on page objects returned by the Notion API
          :header-rows: 1
          :widths: 15 20 65
          :class: longtable

          * - REST API
            - DBAPI row
            - Example and explanation
          * - ``pages.create``
            - (<object-id>, <modified>, <in_trash>, [<property-id>]+,)
            - ``("59833787-2cf9-4fdf-8782-e53db20768a5", False, None, '%3AUPp', 'A%40Hk', 'BJXS',)``:
              When a new page is created, the DBAPI row contains the object and property ids.
          * - ``pages.retrieved``
            - (<object-id>, <modified>, <in_trash>, [<property-value>]+,))
            - ``()``

      :param page: _description_
      :type page: NotionPage

      :returns: _description_
      :rtype: tuple



   .. py:method:: visit_database(db: normlite.notiondbapi._model.NotionDatabase) -> tuple

      Compile a Notion database object and extracts the relevant values.

      The extracted values in the tuple are:
      ``(<object>, <id>, <title>, <archived>, <in_trash>, <properties>)``

      - ``<object>``: ``str``, always ``"database"``.
      - ``<id>``: ``str``, the unique identifier of the database.
      - ``<title>``: ``str``, th name of the database as it appears in Notion.
      - ``<archived>``: ``bool``, the archived status of the page.
      - ``<in_trash>``: ``bool``, whether the page is in Trash (can be ``None``
        if not returned by Notion).
      - ``<properties>``: The schema of properties for the database as they appear in Notion.

      The database properties ``<properties>`` are rendered as a flattened sequence of values:
      ``<key>, <pid>, <type>, <value>`` (see also :class:`NotionProperty`)

      - ``<key>``: ``str``, the property key.
      - ``<pid>``: ``str``, the underlying identifier for the property.
      - ``<type>``: ``str``, the type that controls the behavior of the property.
        Currently supported types are:
        ``"number"``, ``"rich_text"``, ``"title"``.

      .. rubric:: Example

      >>> properties = [
      >>>     NotionProperty('id', 'evWq', 'number', None)
      >>>     NotionProperty('name', 'title', 'title', None)
      >>>     NotionProperty('grade', 'V}lX', 'rich_text', None)
      >>> ]
      >>> page = NotionDatabase(
      >>>     '5bc1211ca-e3f1-4939-ae34-5260b16f627c',
      >>>     'students',
      >>>     properties
      >>> )
      >>> visitor = ToRowVisitor()
      >>> row = page.accept(visitor)
      >>> row
      ('database', '59833787-2cf9-4fdf-8782-e53db20768a5', False, None,
      'id', 'evWq', 'number', None,
      'name', 'title', 'title', None,
      'grade', 'V}lX', 'rich_text', None,)

      :param page: The Notion database object to be cross-compiled.
      :type page: NotionDatabase

      :returns: A tuple containing the relevant values for this adatabase.
      :rtype: tuple



   .. py:method:: visit_property(prop: normlite.notiondbapi._model.NotionProperty) -> tuple


.. py:class:: ToDescVisitor

   Bases: :py:obj:`normlite.notiondbapi._model.NotionObjectVisitor`


   Cross-compile Notion objects to cursor descriptors.

   This visitor cross-compiles a description sequence for Notion pages and database. It does this
   by considering some keys like the object ``"id"`` as if it were columns along with the object properties.
   The latter are the closest mapping to columns between the Notion the SQL object models.
   The metadata added as additional columns are:

       * the object ``"id"``

       * the ``"archived"`` and ``"in_trash"`` flags

   When a new database is created (with the endpoint ``databases.create``), this vistor returns a
   sequence of tuples. Each tuple has always 3 elements, ``None`` signifies absence of a particular value:

       * column name

       * column Notion type (``"string"`` for object ids)

       * column id (assigned by Notion)

   Example::

       # description sequence returned when a new database is created
       (
           ('__id__', 'string', None,),         # object id
           ('__archived__', None, None, )       # the archived flag
           ('__in_trash__', None, None, )       # the in_trash flag
           ('id', 'number', 'evWq',),       # property name 'id'
           ('name', 'title', 'title',),     # property name 'name'
           ('grade', 'rich_text', 'V}lX' ), # property name 'grade'
       )

   When pages are queried (with the endpoint database.query), this visitor constructs a


   When new pages are created (with the endpoint pages.create), this visitor constructs a  description
   sequence of the same structure as for databases, but with ``None`` values for the property types (
   as these are not returned in the Notion object).

   Example::

       # sequence for page returned from a database queryreturn
       (
           ('__id__', 'string', None,),         # object id
           ('__archived__', None, None, )       # the archived flag
           ('id', None, 'evWq',),           # id only for property name 'id'
           ('name', None, 'title',),        # id only for property name 'name'
           ('grade', None, 'V}lX' ),        # id only for property name 'grade'
       )

   .. versionchanged:: 0.4.0
       The overall cross-compilation implemented in :class:`ToDescVisitor` has been refactored to be fully DBAPI 2.0 compliant.

   .. versionchanged:: 0.5.0
       Additional metacolumns names changed to avoid name clashes with user-defined columns:
       ``__id__`` (formerly ``__id__``), ``__archived__`` (formerly ``archived``), ``__in_trash__`` (formerly ``in_trash``),
       ``__title__`` (formerly ``title``).



   .. py:method:: _add_not_used_seq(col_desc: tuple) -> tuple

      Helper to fill in the missing elements with ``None`` values.



   .. py:method:: visit_page(page: normlite.notiondbapi._model.NotionPage) -> tuple

      Cross-compile a Notion page iinto a description ``tuple``.

      :param page: The page to be cross-compiled.
      :type page: NotionPage

      :returns: A DBAPI 2.0 compatible description tuple.
      :rtype: tuple



   .. py:method:: visit_database(db: normlite.notiondbapi._model.NotionDatabase) -> tuple

      Cross-compile a Notion database into a description ``tuple``.

      :param db: The database to be cross-compiled.
      :type db: NotionDatabase

      :returns: A DBAPI 2.0 compatible description tuple.
      :rtype: tuple



   .. py:method:: visit_property(prop)



notiondbapi.dbapi2
==================

.. py:module:: notiondbapi.dbapi2


Exceptions
----------

.. autoapisummary::

   notiondbapi.dbapi2.Error
   notiondbapi.dbapi2.InterfaceError
   notiondbapi.dbapi2.DatabaseError
   notiondbapi.dbapi2.InternalError


Classes
-------

.. autoapisummary::

   notiondbapi.dbapi2.Cursor


Module Contents
---------------

.. py:exception:: Error

   Bases: :py:obj:`Exception`


   Base class of all other error exceptions.

   It can be used this to catch all errors with one single `except` statement.


.. py:exception:: InterfaceError

   Bases: :py:obj:`Error`


   Exception raised for errors that are related to the database interface.

   For example, it is raised when an operation is not supported by the Notion API.


.. py:exception:: DatabaseError

   Bases: :py:obj:`Error`


   Exception raised for errors that are related to the database.



.. py:exception:: InternalError

   Bases: :py:obj:`Error`


   Exception raised when the database encounters an internal error.

   For example, the cursor is not valid anymore, an unexpected object has been returned by
   the underlying database driver (i.e. the Notion API).


.. py:class:: Cursor(client: normlite.notion_sdk.client.AbstractNotionClient)

   Implement the `Cursor` class according to the DBAPI 2.0 specification.


   .. py:attribute:: _client


   .. py:attribute:: _result_set


   .. py:attribute:: _rowcount
      :value: -1



   .. py:attribute:: _lastrowid
      :value: 'UNDEF'



   .. py:property:: rowcount
      :type: int


      



      This read-only attribute specifies the number of rows that the
          last `.execute*()` produced.

      :returns:

                Number of rows. `-1` if in case no `.execute*()` has been performed
                     on the cursor or the rowcount of the last operation cannot be
                     determined by the interface.
      :rtype: int


   .. py:property:: lastrowid
      :type: Optional[int]


      This read-only attribute provides the rowid of the last modified row.

      Most Notion API calls return an object with an id, which is used as rowid.
      If the operation does not set a rowid, this attribute is set to `None`.

      The semantics of `.lastrowid` are undefined in case the last executed statement
      modified more than one row, e.g. when using `INSERT` with `.executemany()`.
      `.lastworid` return a 128-bit integer representation of the object id, which can be
      used to access Notion objects.

      Example:
      >>> object_id = str(uuid.UUID(cursor.lastrowid)))
      >>> print(object_id)
      680dee41-b447-451d-9d36-c6eaff13fb46

      :returns: A 128-bit integer representing the UUID object id or `None`.
      :rtype: Optional[int]


   .. py:method:: _parse_object(obj: Dict[str, Any]) -> List[Tuple[str, str, Any]]


   .. py:method:: fetchall() -> List[List[Tuple[str, str, Any]]]


   .. py:method:: execute(operation: Dict[str, Any], parameters: Dict[str, Any]) -> Self

      Prepare and execute a database operation (query or command).

      The `execute()` methods implements a return interface to enable concatenating
      calls on `Cursor` methods.

      .. rubric:: Examples

      Create a new page as child of an exisisting database:

      >>> operation = {'endpoint': 'pages', 'request': 'create'}
      >>> parameters = {
      >>>    'parent': {
      >>>         'type': 'database_id',
      >>>         'database_id': 'd9824bdc-8445-4327-be8b-5b47500af6ce'
      >>>     },
      >>>     'properties': {
      >>>         'id': {'number': 1},
      >>>        'name': {'title': {'text': {'content': 'Isaac Newton'}}},
      >>>        'grade': {'rich_text': {'text': {'content': 'B'}}}
      >>>    }
      >>> }
      >>> cursor = Cursor()
      >>> assert cursor.execute(operation, parameters).fetchall() == []

      :param operation: A dictionary containing the Notion API request to be executed
      :type operation: Dict[str, Any]
      :param parameters: A dictionary containing the payload for the Notion API request
      :type parameters: Dict[str, Any]

      :raises InterfaceError: "properties" object not specified in parameters
      :raises InterfaceError: "parent" object not specified in parameters

      :returns: This `Cursor` instance
      :rtype: Self




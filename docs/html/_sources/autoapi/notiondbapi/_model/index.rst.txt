notiondbapi._model
==================

.. py:module:: notiondbapi._model

.. autoapi-nested-parse::

   Provide the Notion API Object model.

   This module implements a simple Notion API object model for easy cross-compilation
   of Notion JSON objects into tuples of elements.
   Notion JSON obejcts like pages and databases are cross-compiled into a Python ``tuple`` object,
   which represents a row as returned by the DBAPI methods :meth:`notiondbapi.dbapi2.Cursor.fetchone()` or
   :meth:`notiondbapi.dbapi2.Cursor.fetchall()`.

   .. list-table:: Mapping between Notion and SQL Objects
      :header-rows: 1
      :widths: 15 10 75
      :class: longtable

      * - Notion
        - SQL
        - Description
      * - Page
        - Row
        - A Notion page belonging to a database maps to an SQL row in a table. The Python implementation
          of the row is a ``tuple`` containing the key elements of the Notion page (see the class
          :class:`notiondbapi._model.NotionPage` for more details).
      * - Database
        - Table
        - A Notion database maps to an SQL table. The Python implementation
          of the table is a ``tuple`` containing the key elements of the Notion database
          (see the class :class:`notiondbapi._model.NotionDatabase` for more details).

   .. important::

      This module is **private** to the package :mod:`notiondbapi`. It is intended to be used *internally*
      by the class :class:`notiondbapi.dbapi2.Cursor` to cross-compile Notion JSON objects.
      **Do not import directly.**





Module Contents
---------------

.. py:class:: AbstractNotionObject

   Bases: :py:obj:`abc.ABC`


   Abstract class for Notion API objects.

   This class starts the class hierarchy and it is used to represent the starting node
   of the **Abstract Syntax Tree** built by the parser.
   It implements the design pattern **Visitor**.


   .. py:method:: accept(visitor: NotionObjectVisitor) -> tuple
      :abstractmethod:


      Provide entry point for the visitor to compile.

      :param visitor: The compiler.
      :type visitor: NotionObjectVisitor

      :returns: A tuple containing a subset of values for the represented Notion object.
      :rtype: tuple



.. py:class:: NotionObjectVisitor

   Bases: :py:obj:`abc.ABC`


   Abstract class for a Notion API objects compiler.

   Subclasses of :class:`NotionObjectVisitor` implement the cross-compilation for each Notion object.


   .. py:method:: visit_page(page: NotionPage) -> tuple
      :abstractmethod:


      Compile a Notion page object and extracts the relevant values.

      :param page: The Notion page object to be cross-compiled.
      :type page: NotionPage

      :returns: A tuple containing the relevant values for this page.
      :rtype: tuple



   .. py:method:: visit_database(db: NotionDatabase) -> tuple
      :abstractmethod:


      Compile a Notion database object and extracts the relevant values.

      The extracted values in the tuple are:
      ``(<object>, <id>, <title>, <archived>, <in_trash>, <properties>)``

      - ``<object>``: ``str``, always ``"database"``.
      - ``<id>``: ``str``, the unique identifier of the database.
      - ``<title>``: ``str``, th name of the database as it appears in Notion.
      - ``<archived>``: ``bool``, the archived status of the page.
      - ``<in_trash>``: ``bool``, whether the page is in Trash (can be ``None``
        if not returned by Notion).
      - ``<properties>``: The schema of properties for the database as they appear in Notion.

      The database properties ``<properties>`` are rendered as a flattened sequence of values:
      ``<key>, <pid>, <type>, <value>`` (see also :class:`NotionProperty`)

      - ``<key>``: ``str``, the property key.
      - ``<pid>``: ``str``, the underlying identifier for the property.
      - ``<type>``: ``str``, the type that controls the behavior of the property.
        Currently supported types are:
        ``"number"``, ``"rich_text"``, ``"title"``.

      .. rubric:: Example

      >>> properties = [
      >>>     NotionProperty('id', 'evWq', 'number', None)
      >>>     NotionProperty('name', 'title', 'title', None)
      >>>     NotionProperty('grade', 'V}lX', 'rich_text', None)
      >>> ]
      >>> page = NotionDatabase(
      >>>     '5bc1211ca-e3f1-4939-ae34-5260b16f627c',
      >>>     'students',
      >>>     properties
      >>> )
      >>> visitor = ToRowVisitor()
      >>> row = page.accept(visitor)
      >>> row
      ('database', '59833787-2cf9-4fdf-8782-e53db20768a5', False, None,
      'id', 'evWq', 'number', None,
      'name', 'title', 'title', None,
      'grade', 'V}lX', 'rich_text', None,)

      :param page: The Notion database object to be cross-compiled.
      :type page: NotionDatabase

      :returns: A tuple containing the relevant values for this adatabase.
      :rtype: tuple



   .. py:method:: visit_property(prop: NotionProperty) -> tuple
      :abstractmethod:



.. py:class:: NotionProperty(name: str, id: str, type: str, value: Any = None)

   Bases: :py:obj:`AbstractNotionObject`


   Provide Python object implementation for Notion property objects.

   This class implements both Notion page and database property objects.
   Its :meth:`NotionProperty.accept()` compiles the property elements into a tuple as follows::

       >>> property = NotionProperty('name', 'title', 'title')  # no value provided
       >>> visitor = ToRowVisitor()
       >>> row = property.accept(visitor)
       >>> row
       ('name', 'title', 'title', None)

   :param name: The property name.
   :type name: str
   :param id: The property id.
   :type id: str
   :param type: The property type.
   :type type: str
   :param value: The property value. Defaults to ``None`` (for example, database properties).
   :type value: Any, optional


   .. py:attribute:: name

      The property name.

      :type: name (str)


   .. py:attribute:: id

      The property id.

      :type: id (str)


   .. py:attribute:: type

      The property type.

      :type: type (str)


   .. py:attribute:: value
      :value: None


      The property value. Defaults to ``None``
      when a property belongs to a database object or when the parent object is a
      newly created object.

      :type: value (Any)


   .. py:method:: accept(visitor: NotionObjectVisitor) -> tuple

      Compile the property object to a tuple.

      .. rubric:: Example

      >>> # property is a previously created NotionProperty object
      >>> visitor = ToRowVisitor()
      >>> row = visitor.accept(property)
      >>> row
      ('id', 'evWq', 'number', None,)

      :param visitor: The compiler.
      :type visitor: NotionObjectVisitor

      :returns: The tuple describing the property object.
      :rtype: tuple



   .. py:method:: __repr__() -> str


.. py:class:: NotionPage(id: str, properties: List[NotionProperty], archived: Optional[bool] = None, in_trash: Optional[bool] = None)

   Bases: :py:obj:`AbstractNotionObject`


   Provide Python object implementation for Notion page objects.

   This class implements Notion page objects.
   Its :meth:`NotionPage.accept()` compiles the page elements into a tuple as follows::

       >>> properties = [
       >>>     NotionProperty('Price', 'BJXS', 'number', 2.5)
       >>>     NotionProperty('Name', 'title', 'title', 'Tuscan kale')
       >>> ]
       >>> page = NotionPage(
       >>>     '59833787-2cf9-4fdf-8782-e53db20768a5',     # page id as assigned by Notion
       >>>     False,                                      # archived flag is False for this page
       >>>     None,                                       # in_trash flag is not provided
       >>>     properties
       >>> )
       >>> visitor = ToRowVisitor()
       >>> row = page.accept(visitor)
       >>> row
       ('page','59833787-2cf9-4fdf-8782-e53db20768a5', False, None,
       'Price', 'BJXS', 'number', 2.5,
       'Name', 'title', 'title', 'Tuscan kale')

   :param id: The page id.
   :type id: str
   :param properties: The page properties
   :type properties: List[NotionProperty]
   :param archived: The ``"archived"`` flag for this page. Defaults to ``None``.
   :type archived: Optional[bool], optional
   :param in_trash: The ``"in_trash"`` flag for this page. Defaults to ``None``.
   :type in_trash: Optional[bool], optional


   .. py:attribute:: id

      The page id as assigned by Notion.


   .. py:attribute:: archived
      :value: None


      The ``"archived"`` flag for this page. Defaults to ``None`` when
      the page is a newly created object.


   .. py:attribute:: in_trash
      :value: None


      The ``"in_trash"`` flag for this page. Defaults to ``None`` when
      the page is a newly created object.


   .. py:attribute:: properties

      The page ``"properties"`` object.


   .. py:method:: accept(visitor: NotionObjectVisitor) -> tuple

      Compile a Notion page into a row.

      This method cross-compiles the page object into a row, which can be further processed by
      the class :class:`normlite.notiondbapi.Cursor`.
      The internal Python representation of a JSON Notion page object is a ``tuple``.

      .. rubric:: Example

      >>> # page is a previously created NotionPage object
      >>> visitor = ToRowVisitor()
      >>> row = visitor.accept(page)
      >>> row
      ('page','59833787-2cf9-4fdf-8782-e53db20768a5', False, None,
      'Price', 'BJXS', 'number', 2.5,
      'Name', 'title', 'title', 'Tuscan kale')

      :param visitor: The compiler.
      :type visitor: NotionObjectVisitor

      :returns: The cross-compiled row.
      :rtype: tuple



.. py:class:: NotionDatabase(id: str, title: str, properties: List[NotionProperty], archived: Optional[bool] = None, in_trash: Optional[bool] = None)

   Bases: :py:obj:`AbstractNotionObject`


   Provide Python object implementation for Notion database objects.

   This class implements both Notion database objects.
   Its :meth:`NotionDatabase.accept()` compiles the page elements into a tuple as follows::

       >>> properties = [
       >>>     NotionProperty('id', 'evWq', 'number', None),
       >>>     NotionProperty('name', 'title', 'title', None),
       >>>     NotionProperty('grade', 'V}lX', 'rich_text', None),
       >>> ]
       >>> database = NotionDatabase(
       >>>     '59833787-2cf9-4fdf-8782-e53db20768a5',     # page id as assigned by Notion
       >>>     'students',                                 # the database name
       >>>     properties,                                 # the properties as list of NotionProperty
       >>>     False,                                      # archived flag is False for this page
       >>>     None,                                       # in_trash flag is not provided
       >>> )
       >>> visitor = ToRowVisitor()
       >>> row = database.accept(visitor)
       >>> row
       ('database','59833787-2cf9-4fdf-8782-e53db20768a5', 'students', False, None,
       'id', 'evWq', 'number', None,
       'name', 'title', 'title', None,
       'grade', 'V}lX', 'rich_text', None,)

   :param AbstractNotionObject: _description_
   :type AbstractNotionObject: _type_


   .. py:attribute:: id


   .. py:attribute:: title


   .. py:attribute:: archived
      :value: None



   .. py:attribute:: in_trash
      :value: None



   .. py:attribute:: properties


   .. py:method:: accept(visitor: NotionObjectVisitor) -> tuple

      Provide entry point for the visitor to compile.

      :param visitor: The compiler.
      :type visitor: NotionObjectVisitor

      :returns: A tuple containing a subset of values for the represented Notion object.
      :rtype: tuple



   .. py:method:: __repr__()


